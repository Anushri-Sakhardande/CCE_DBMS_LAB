2):)

create or replace trigger driver_info
after insert on participated
for each row
declare 
id varchar(30);
nam varchar(50);
add varchar(100);
begin
select driver_id,name,address into id,nam,add
from person
where :new.driver_id=person.driver_id;
dbms_output.put_line(' Driver_id:'||id||' Name:'||nam||' Address:'||add);
end;
/

insert into accident values(32,'24-FEB-23','airport road,Delhi');
insert into participated values('MT739023','DL05MO905',900,32);
delete from participated where report_number=32;


Driver_id:MT739023 Name:Vivaan V Address:A-23,Grand Living,Indiranagar,Delhi



3) :)

create or replace function total_accd
(year in int)
return int
as
total int;
begin
select count(report_number)
into total
from accident
where extract(year from accd_date)=year;
return total;
end;
/

select total_accd(2019) from dual;
TOTAL_ACCD(2019)
----------------
               2

4) :)
set serveroutput on
create or replace procedure tot_damage
(driver in varchar,year in int) is
damage int;
begin 
select sum(damage_amount) into damage
 from participated pa natural join accident ac 
 where pa.driver_id = driver and extract(year from ac.accd_date) = year;
dbms_output.put_line('Total damage:'|| damage);
end;
/

execute tot_damage('MT739023',2019);

Total damage:100900

PL/SQL procedure successfully completed.

5) :)
set serveroutput on
create or replace procedure accident_info(location_value in varchar) IS
begin
    for accident_rec in 
	(select * from accident where location = location_value) loop
        dbms_output.put_line('Report Number: ' || accident_rec.report_number || ', Date: ' || accident_rec.accd_date || ', Location: ' || accident_rec.location);
   end loop;
end;
/

execute accident_info('airport road,Delhi');

Report Number: 32, Date: 24-FEB-23, Location: airport road,Delhi
Report Number: 12, Date: 24-FEB-19, Location: airport road,Delhi

PL/SQL procedure successfully completed.


Extra

1)
create table T1(
driver_id varchar(20),
name varchar(30),
address varchar(50),
tot_damage int,
primary key(driver_id));

CREATE OR REPLACE PROCEDURE accident_info_exceeds IS
    v_total_damage NUMBER;
BEGIN
    FOR driver_rec IN (SELECT DISTINCT p.driver_id, p.name, p.address
                       FROM person p
                       JOIN participated pa ON p.driver_id = pa.driver_id)
    LOOP
        SELECT SUM(pa.damage_amount)
        INTO v_total_damage
        FROM participated pa
        WHERE pa.driver_id = driver_rec.driver_id;

        IF v_total_damage > 50000 THEN
            INSERT INTO T1 (driver_id, name, address, tot_damage)
            VALUES (driver_rec.driver_id, driver_rec.name, driver_rec.address, v_total_damage);
            COMMIT;
        END IF;
    END LOOP;
END;
/

select * from T1;

DRIVER_ID            NAME
-------------------- ------------------------------
ADDRESS                                            TOT_DAMAGE
-------------------------------------------------- ----------
MT739023             Vivaan V
A-23,Grand Living,Indiranagar,Delhi                    109400


2)




3)

CREATE OR REPLACE TRIGGER intimate_driver
BEFORE INSERT ON participated
FOR EACH ROW
DECLARE 
    driver_name person.name%TYPE; 
    total_accident NUMBER;
BEGIN
    SELECT COUNT(DISTINCT report_number), name 
    INTO total_accident, driver_name
    FROM participated pa
    JOIN person p ON pa.driver_id = p.driver_id
    WHERE pa.driver_id = :new.driver_id
    GROUP BY p.name;

    IF total_accident = 3 THEN
        DBMS_OUTPUT.PUT_LINE('Driver: ' || driver_name || ' has reached 3 accidents.');
    END IF;
END;
/

insert into accident
values(10004,To_Date('2022-09-12','yyyy-mm-dd'),'Sion');
insert into accident
values(854,To_Date('2021-09-12','yyyy-mm-dd'),'Kurla');


insert into participated
values('AA19830','MH40NI987',110,10004);
insert into participated
values('AA19830','MH40NI987',300,854);

delete from participated where report_number=854;

4)

set serveroutput on
create or replace function withdraw(accid char, withamt number) is
minbal constant number := 1000;
bal number;
newbal number;
count1 number;
begin
	select count(*) into count1
	from tbl_account
	where accounted = accid;
	if count1 = 0 then
		dbms_output.put_line(‘No Account’);
	else
		select balance into bal
		from tbl_account
		where accounted = accid;

		newbal := bal – withamt;
		if newbal < minbal then
			dbms_output.put_line(‘Cannot withdraw’);
		else 
			update tabl_account set balance = newbal
			where accointid = accid;
			commit;
			dbms_output.put_line(‘New balance: ‘||newbal);
		end if;
	end if;
end;
/


5)

CREATE OR REPLACE PROCEDURE Discount
AS
	CURSOR c_group_discount
	IS
	  SELECT distinct s.course_no, c.description
		FROM section s, enrollment e, course c
		WHERE s.section_id = e.section_id
			AND c.course_no = s.course_no
	   	GROUP BY s.course_no, c.description, e.section_id
	   	HAVING COUNT(*) >=80;
BEGIN     // For these courses 5% discount have to be given

FOR r_group_discount IN c_group_discount LOOP
		UPDATE course
			SET cost = cost * 0.95
		WHERE course_no = r_group_discount.course_no;

		DBMS_OUTPUT.PUT_LINE
			('A 5% discount has been given to'||
			r_group_discount.course_no||' '||
			r_group_discount.description
			);
	END LOOP;
END;
/



